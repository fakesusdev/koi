From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KurumiFake <kurumiisshidowife@gmail.com>
Date: Tue, 15 Mar 2022 02:18:24 +0000
Subject: [PATCH] Remove Flare

the artifact is broken, with it in the pom the build will fail
if you need Flare, it exists as a standalone plugin now too, ya can find that at https://github.com/TECHNOVE/FlarePlugin

diff --git a/pom.xml b/pom.xml
index 803f2fce6809f24bb06f03c9b33fe19af957439c..e8f703730d1d85b2acdd209a92a47de0076cdadb 100644
--- a/pom.xml
+++ b/pom.xml
@@ -207,13 +207,6 @@
             <version>fe3dbb4420</version>
             <scope>compile</scope>
         </dependency>
-        <!-- Airplane - Flare -->
-        <dependency>
-            <groupId>com.github.technove</groupId>
-            <artifactId>Flare</artifactId>
-            <version>v3-SNAPSHOT</version>
-            <scope>compile</scope>
-        </dependency>
     </dependencies>
 
     <!-- This builds a completely 'ready to start' jar with all dependencies inside -->
diff --git a/src/main/java/gg/airplane/AirplaneConfig.java b/src/main/java/gg/airplane/AirplaneConfig.java
index e234e2944f9f764f8110c473997d438a9dc66146..3a8a494d2f4f5a2d1f35328be082e2c4379e1474 100644
--- a/src/main/java/gg/airplane/AirplaneConfig.java
+++ b/src/main/java/gg/airplane/AirplaneConfig.java
@@ -81,28 +81,6 @@ public class AirplaneConfig {
     }
 
 
-    public static String profileWebUrl;
-
-    private static void profilerOptions() {
-        config.setComment("flare", "Configures Flare, the built-in profiler");
-
-        profileWebUrl = config.getString("flare.url", "https://flare.airplane.gg", "Sets the server to use for profiles.");
-    }
-
-
-    public static String accessToken;
-
-    private static void airplaneWebServices() {
-        config.setComment("web-services", "Options for connecting to Airplane's online utilities");
-
-        accessToken = config.getString("web-services.token", "");
-        // todo lookup token (off-thread) and let users know if their token is valid
-        if (accessToken.length() > 0) {
-            gg.airplane.flare.FlareSetup.init(); // Airplane
-        }
-    }
-
-
     public static byte entityDespawnCheckFrequency;
 
     private static void entitySettings() {
diff --git a/src/main/java/gg/airplane/AirplaneLogger.java b/src/main/java/gg/airplane/AirplaneLogger.java
deleted file mode 100644
index 1a9d71739019d12772bec6076b195552ff6299f9..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/AirplaneLogger.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package gg.airplane;
-
-import org.bukkit.Bukkit;
-
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-public class AirplaneLogger extends Logger {
-    public static final AirplaneLogger LOGGER = new AirplaneLogger();
-
-    private AirplaneLogger() {
-        super("Airplane", null);
-
-        setParent(Bukkit.getLogger());
-        setLevel(Level.ALL);
-    }
-}
diff --git a/src/main/java/gg/airplane/commands/AirplaneCommands.java b/src/main/java/gg/airplane/commands/AirplaneCommands.java
index 66b20250a26d005427601b1cdee43bdd9eba70cc..807cf274619b8f7be839e249cb62b9817876ca04 100644
--- a/src/main/java/gg/airplane/commands/AirplaneCommands.java
+++ b/src/main/java/gg/airplane/commands/AirplaneCommands.java
@@ -1,12 +1,10 @@
 package gg.airplane.commands;
 
 import gg.airplane.AirplaneCommand;
-import gg.airplane.flare.FlareCommand;
 import net.minecraft.server.MinecraftServer;
 
 public class AirplaneCommands {
     public static void init() {
         MinecraftServer.getServer().server.getCommandMap().register("airplane", "Airplane", new AirplaneCommand());
-        MinecraftServer.getServer().server.getCommandMap().register("flare", "Airplane", new FlareCommand());
     }
 }
diff --git a/src/main/java/gg/airplane/compat/ServerConfigurations.java b/src/main/java/gg/airplane/compat/ServerConfigurations.java
deleted file mode 100644
index 8f85a7d3fde1d22e2510327b2b7c9e965ba3fee8..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/compat/ServerConfigurations.java
+++ /dev/null
@@ -1,87 +0,0 @@
-package gg.airplane.compat;
-
-import co.aikar.timings.TimingsManager;
-import com.google.common.io.Files;
-import org.bukkit.configuration.InvalidConfigurationException;
-import org.bukkit.configuration.file.YamlConfiguration;
-
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.stream.Collectors;
-
-public class ServerConfigurations {
-
-    public static final String[] configurationFiles = new String[]{
-      "server.properties",
-      "bukkit.yml",
-      "spigot.yml",
-      "paper.yml",
-      "tuinity.yml",
-      "airplane.air"
-    };
-
-    public static Map<String, String> getCleanCopies() throws IOException {
-        Map<String, String> files = new HashMap<>(configurationFiles.length);
-        for (String file : configurationFiles) {
-            files.put(file, getCleanCopy(file));
-        }
-        return files;
-    }
-
-    public static String getCleanCopy(String configName) throws IOException {
-        File file = new File(configName);
-        List<String> hiddenConfigs = TimingsManager.hiddenConfigs;
-
-        if (configName.equals("airplane.air")) {
-            return Files.readLines(file, StandardCharsets.UTF_8)
-              .stream()
-              .filter(line -> !line.trim().startsWith("#"))
-              .map(line -> line.contains("token") ? "  token = **" : line)
-              .collect(Collectors.joining("\n"));
-        }
-
-        switch (Files.getFileExtension(configName)) {
-            case "properties": {
-                Properties properties = new Properties();
-                try (FileInputStream inputStream = new FileInputStream(file)) {
-                    properties.load(inputStream);
-                }
-                for (String hiddenConfig : hiddenConfigs) {
-                    properties.remove(hiddenConfig);
-                }
-                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
-                properties.store(outputStream, "");
-                return Arrays.stream(outputStream.toString()
-                  .split("\n"))
-                  .filter(line -> !line.startsWith("#"))
-                  .collect(Collectors.joining("\n"));
-            }
-            case "yml": {
-                YamlConfiguration configuration = new YamlConfiguration();
-                try {
-                    configuration.load(file);
-                } catch (InvalidConfigurationException e) {
-                    throw new IOException(e);
-                }
-                configuration.options().header(null);
-                for (String key : configuration.getKeys(true)) {
-                    if (hiddenConfigs.contains(key)) {
-                        configuration.set(key, null);
-                    }
-                }
-                return configuration.saveToString();
-            }
-            default:
-                throw new IllegalArgumentException("Bad file type " + configName);
-        }
-    }
-
-}
diff --git a/src/main/java/gg/airplane/flare/CustomCategories.java b/src/main/java/gg/airplane/flare/CustomCategories.java
deleted file mode 100644
index cf5b8da28dbae29f3050ba3c27a6012db604532a..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/flare/CustomCategories.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package gg.airplane.flare;
-
-import gg.airplane.flare.live.category.GraphCategory;
-
-public class CustomCategories {
-    public static final GraphCategory MC_PERF = new GraphCategory("MC Performance");
-    public static final GraphCategory ENTITIES_AND_CHUNKS = new GraphCategory("Entities & Chunks");
-}
diff --git a/src/main/java/gg/airplane/flare/FlareCommand.java b/src/main/java/gg/airplane/flare/FlareCommand.java
deleted file mode 100644
index 295b10a936d616cacbf33064e8a384fc3ac1a423..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/flare/FlareCommand.java
+++ /dev/null
@@ -1,147 +0,0 @@
-package gg.airplane.flare;
-
-import gg.airplane.AirplaneConfig;
-import gg.airplane.flare.exceptions.UserReportableException;
-import gg.airplane.flare.profiling.AsyncProfilerIntegration;
-import gg.airplane.flare.profiling.ProfileType;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.event.ClickEvent;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.format.TextColor;
-import net.kyori.adventure.text.format.TextDecoration;
-import org.bukkit.Bukkit;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandSender;
-import org.bukkit.command.ConsoleCommandSender;
-import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
-import org.bukkit.util.StringUtil;
-import org.jetbrains.annotations.NotNull;
-
-import java.time.Duration;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-public class FlareCommand extends Command {
-
-    private static final String BASE_URL = "https://blog.airplane.gg/flare-tutorial/#setting-the-access-token";
-    private static final TextColor HEX = TextColor.fromHexString("#e3eaea");
-    private static final Component PREFIX = Component.text()
-      .append(Component.text("Flare âœˆ")
-        .color(TextColor.fromHexString("#6a7eda"))
-        .decoration(TextDecoration.BOLD, true)
-        .append(Component.text(" ", HEX)
-          .decoration(TextDecoration.BOLD, false)))
-      .asComponent();
-
-    public FlareCommand() {
-        super("flare", "Profile your server with Flare", "/flare", Collections.singletonList("profile"));
-        this.setPermission("airplane.flare");
-    }
-
-    @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, String @NotNull [] args) {
-        if (!testPermission(sender)) return true;
-        if (AirplaneConfig.accessToken.length() == 0) {
-            Component clickable = Component.text(BASE_URL, HEX, TextDecoration.UNDERLINED).clickEvent(ClickEvent.clickEvent(ClickEvent.Action.OPEN_URL, BASE_URL));
-
-            sender.sendMessage(PREFIX.append(Component.text("Flare currently requires an access token to use. To learn more, visit ").color(HEX).append(clickable)));
-            return true;
-        }
-
-        if (!FlareSetup.isSupported()) {
-            sender.sendMessage(PREFIX.append(
-              Component.text("Profiling is not supported in this environment, check your startup logs for the error.", NamedTextColor.RED)));
-            return true;
-        }
-        if (ProfilingManager.isProfiling()) {
-            if (args.length == 1 && args[0].equalsIgnoreCase("status")) {
-                sender.sendMessage(PREFIX.append(Component.text("Status: " + AsyncProfilerIntegration.status(), HEX)));
-                return true;
-            }
-            if (ProfilingManager.stop()) {
-                if (!(sender instanceof ConsoleCommandSender)) {
-                    sender.sendMessage(PREFIX.append(Component.text("Profiling has been stopped.", HEX)));
-                }
-            } else {
-                sender.sendMessage(PREFIX.append(Component.text("Profiling has already been stopped.", HEX)));
-            }
-        } else {
-            ProfileType profileType = ProfileType.ITIMER;
-            if (args.length > 0) {
-                try {
-                    profileType = ProfileType.valueOf(args[0].toUpperCase());
-                } catch (Exception e) {
-                    sender.sendMessage(PREFIX.append(Component
-                      .text("Invalid profile type ", HEX)
-                      .append(Component.text(args[0], HEX, TextDecoration.BOLD)
-                        .append(Component.text("!", HEX)))
-                    ));
-                }
-            }
-            int interval = 5;
-            if (args.length > 1) {
-                try {
-                    interval = Integer.parseInt(args[1]);
-                } catch (Exception e) {
-                    sender.sendMessage(PREFIX.append(Component
-                      .text("Invalid time in milliseconds ", HEX)
-                      .append(Component.text(args[1], HEX, TextDecoration.BOLD)
-                        .append(Component.text("!", HEX)))
-                    ));
-                    return true;
-                }
-            }
-            int finalInterval = interval;
-            ProfileType finalProfileType = profileType;
-            Bukkit.getScheduler().runTaskAsynchronously(new MinecraftInternalPlugin(), () -> {
-                try {
-                    if (ProfilingManager.start(new ProfilingSettings(finalProfileType, Duration.ofMillis(finalInterval)))) {
-                        if (!(sender instanceof ConsoleCommandSender)) {
-                            sender.sendMessage(PREFIX.append(Component
-                              .text("Flare has been started: " + ProfilingManager.getProfilingUrl(), HEX)
-                              .clickEvent(ClickEvent.openUrl(ProfilingManager.getProfilingUrl()))
-                            ));
-                            sender.sendMessage(PREFIX.append(Component.text("  Run /" + commandLabel + " to stop the Flare.", HEX)));
-                        }
-                    } else {
-                        sender.sendMessage(PREFIX.append(Component
-                          .text("Flare has already been started: " + ProfilingManager.getProfilingUrl(), HEX)
-                          .clickEvent(ClickEvent.openUrl(ProfilingManager.getProfilingUrl()))
-                        ));
-                    }
-                } catch (UserReportableException e) {
-                    sender.sendMessage(Component.text("Flare failed to start: " + e.getUserError(), NamedTextColor.RED));
-                    e.printStackTrace();
-                }
-            });
-        }
-        return true;
-    }
-
-    @Override
-    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, String @NotNull [] args) throws IllegalArgumentException {
-        List<String> list = new ArrayList<>();
-        if (ProfilingManager.isProfiling()) {
-            if (args.length == 1) {
-                String lastWord = args[0];
-                if (StringUtil.startsWithIgnoreCase("status", lastWord)) {
-                    list.add("status");
-                }
-                if (StringUtil.startsWithIgnoreCase("stop", lastWord)) {
-                    list.add("stop");
-                }
-            }
-        } else {
-            if (args.length <= 1) {
-                String lastWord = args.length == 0 ? "" : args[0];
-                for (ProfileType value : ProfileType.values()) {
-                    if (StringUtil.startsWithIgnoreCase(value.getInternalName(), lastWord)) {
-                        list.add(value.name().toLowerCase());
-                    }
-                }
-            }
-        }
-        return list;
-    }
-}
diff --git a/src/main/java/gg/airplane/flare/FlareSetup.java b/src/main/java/gg/airplane/flare/FlareSetup.java
deleted file mode 100644
index cd1998569b702a67d5d15b033b6bdda6d9cdcfe6..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/flare/FlareSetup.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package gg.airplane.flare;
-
-import gg.airplane.flare.profiling.InitializationException;
-import net.minecraft.server.MinecraftServer;
-import org.apache.logging.log4j.Level;
-
-public class FlareSetup {
-
-    private static boolean initialized = false;
-    private static boolean supported = false;
-
-    public static void init() {
-        if (initialized) {
-            return;
-        }
-
-        initialized = true;
-        try {
-            for (String warning : Flare.initialize()) {
-                MinecraftServer.LOGGER.log(Level.WARN, "Flare warning: " + warning);
-            }
-            supported = true;
-        } catch (InitializationException e) {
-            MinecraftServer.LOGGER.log(Level.WARN, "Failed to enable Flare:", e);
-        }
-    }
-
-    public static boolean isSupported() {
-        return supported;
-    }
-
-}
diff --git a/src/main/java/gg/airplane/flare/PluginLookup.java b/src/main/java/gg/airplane/flare/PluginLookup.java
deleted file mode 100644
index 22368976212ac6638a31e81d22c322a53c94d276..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/flare/PluginLookup.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package gg.airplane.flare;
-
-import com.google.common.cache.Cache;
-import com.google.common.cache.CacheBuilder;
-import org.bukkit.Bukkit;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.java.PluginClassLoader;
-
-import java.util.Optional;
-import java.util.concurrent.TimeUnit;
-
-public class PluginLookup {
-    private static final Cache<String, String> pluginNameCache = CacheBuilder.newBuilder()
-      .expireAfterAccess(1, TimeUnit.MINUTES)
-      .maximumSize(1024)
-      .build();
-
-    public static Optional<String> getPluginForClass(String name) {
-        if (name.startsWith("net.minecraft") || name.startsWith("java.") || name.startsWith("com.mojang") ||
-          name.startsWith("com.google") || name.startsWith("it.unimi") || name.startsWith("sun")) {
-            return Optional.empty();
-        }
-
-        String existing = pluginNameCache.getIfPresent(name);
-        if (existing != null) {
-            return Optional.ofNullable(existing.isEmpty() ? null : existing);
-        }
-
-        String newValue = "";
-
-        for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
-            ClassLoader classLoader = plugin.getClass().getClassLoader();
-            if (classLoader instanceof PluginClassLoader) {
-                if (((PluginClassLoader) classLoader)._airplane_hasClass(name)) {
-                    newValue = plugin.getName();
-                    break;
-                }
-            }
-        }
-
-        pluginNameCache.put(name, newValue);
-        return Optional.ofNullable(newValue.isEmpty() ? null : newValue);
-    }
-}
diff --git a/src/main/java/gg/airplane/flare/ProfilingManager.java b/src/main/java/gg/airplane/flare/ProfilingManager.java
deleted file mode 100644
index 6d5e442824de2d71160be49e36f0605a216f247d..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/flare/ProfilingManager.java
+++ /dev/null
@@ -1,100 +0,0 @@
-package gg.airplane.flare;
-
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableSet;
-import gg.airplane.AirplaneConfig;
-import gg.airplane.AirplaneLogger;
-import gg.airplane.compat.ServerConfigurations;
-import gg.airplane.flare.collectors.TPSCollector;
-import gg.airplane.flare.collectors.WorldCountCollector;
-import gg.airplane.flare.exceptions.UserReportableException;
-import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
-import org.bukkit.scheduler.BukkitTask;
-
-import java.io.IOException;
-import java.util.Objects;
-import java.util.logging.Level;
-
-public class ProfilingManager {
-
-    private static Flare currentFlare;
-    private static BukkitTask currentTask = null;
-
-    public static synchronized boolean isProfiling() {
-        return currentFlare != null;
-    }
-
-    public static synchronized String getProfilingUrl() {
-        return Objects.requireNonNull(currentFlare).getURL().orElse("Flare is not running");
-    }
-
-    public static synchronized boolean start(ProfilingSettings settings) throws UserReportableException {
-        if (currentFlare != null && currentFlare.isRan()) {
-            currentFlare = null; // errored out
-        }
-        if (isProfiling()) {
-            return false;
-        }
-        if (Bukkit.isPrimaryThread()) {
-            throw new UserReportableException("Profiles should be started off-thread");
-        }
-
-        try {
-            currentFlare = new Flare(
-              settings,
-              new ServerData(ServerConfigurations.getCleanCopies(), ImmutableMap.of(
-                "Primary Version", Bukkit.getVersion(),
-                "Bukkit Version", Bukkit.getBukkitVersion(),
-                "Minecraft Version", Bukkit.getMinecraftVersion()
-              )),
-              new FlareAuth(AirplaneConfig.accessToken, AirplaneConfig.profileWebUrl),
-              ImmutableList.of(new TPSCollector(), new WorldCountCollector()),
-              PluginLookup::getPluginForClass,
-              ImmutableSet.of(CustomCategories.MC_PERF, CustomCategories.ENTITIES_AND_CHUNKS)
-            );
-        } catch (IOException e) {
-            AirplaneLogger.LOGGER.log(Level.WARNING, "Failed to read configuration files:", e);
-            throw new UserReportableException("Failed to load configuration files, check logs for further details.");
-        }
-
-        try {
-            currentFlare.start();
-        } catch (IllegalStateException e) {
-            AirplaneLogger.LOGGER.log(Level.WARNING, "Error starting Flare:", e);
-            throw new UserReportableException("Failed to start Flare, check logs for further details.");
-        }
-
-        currentTask = Bukkit.getScheduler().runTaskLater(new MinecraftInternalPlugin(), ProfilingManager::stop, 20 * 60 * 15);
-        AirplaneLogger.LOGGER.log(Level.INFO, "Flare has been started: " + getProfilingUrl());
-        return true;
-    }
-
-    public static synchronized boolean stop() {
-        if (!isProfiling()) {
-            return false;
-        }
-        if (currentFlare.isRan()) {
-            currentFlare = null;
-            return true;
-        }
-        AirplaneLogger.LOGGER.log(Level.INFO, "Flare has been stopped: " + getProfilingUrl());
-        try {
-            currentFlare.stop();
-        } catch (IllegalStateException e) {
-            AirplaneLogger.LOGGER.log(Level.WARNING, "Error occurred stopping Flare", e);
-        }
-        currentFlare = null;
-
-        try {
-            currentTask.cancel();
-        } catch (Throwable t) {
-            AirplaneLogger.LOGGER.log(Level.WARNING, "Error occurred stopping Flare", t);
-        }
-
-        currentTask = null;
-        return true;
-    }
-
-}
diff --git a/src/main/java/gg/airplane/flare/collectors/TPSCollector.java b/src/main/java/gg/airplane/flare/collectors/TPSCollector.java
deleted file mode 100644
index c60ce5a53c05e28afae5f9fadbab0a3612d97cc3..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/flare/collectors/TPSCollector.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package gg.airplane.flare.collectors;
-
-import gg.airplane.flare.CustomCategories;
-import gg.airplane.flare.live.CollectorData;
-import gg.airplane.flare.live.LiveCollector;
-import gg.airplane.flare.live.formatter.SuffixFormatter;
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.Bukkit;
-
-import java.time.Duration;
-import java.util.Arrays;
-
-public class TPSCollector extends LiveCollector {
-    private static final CollectorData TPS = new CollectorData("airplane:tps", "TPS", "Ticks per second, or how fast the server updates. For a smooth server this should be a constant 20TPS.", SuffixFormatter.of("TPS"), CustomCategories.MC_PERF);
-    private static final CollectorData MSPT = new CollectorData("airplane:mspt", "MSPT", "Milliseconds per tick, which can show how well your server is performing. This value should always be under 50mspt.", SuffixFormatter.of("mspt"), CustomCategories.MC_PERF);
-
-    public TPSCollector() {
-        super(TPS, MSPT);
-
-        this.interval = Duration.ofSeconds(3);
-    }
-
-    @Override
-    public void run() {
-        long[] times = MinecraftServer.getServer().tickTimes5s.getTimes();
-        double mspt = ((double) Arrays.stream(times).sum() / (double) times.length) * 1.0E-6D;
-
-        this.report(TPS, Math.min(20D, Math.round(Bukkit.getServer().getTPS()[0] * 100d) / 100d));
-        this.report(MSPT, (double) Math.round(mspt * 100d) / 100d);
-    }
-}
diff --git a/src/main/java/gg/airplane/flare/collectors/WorldCountCollector.java b/src/main/java/gg/airplane/flare/collectors/WorldCountCollector.java
deleted file mode 100644
index bbc7fc110570310e2b72eae1dcdadbc3dcbf7b04..0000000000000000000000000000000000000000
--- a/src/main/java/gg/airplane/flare/collectors/WorldCountCollector.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package gg.airplane.flare.collectors;
-
-import gg.airplane.flare.CustomCategories;
-import gg.airplane.flare.live.CollectorData;
-import gg.airplane.flare.live.LiveCollector;
-import gg.airplane.flare.live.formatter.SuffixFormatter;
-import org.bukkit.Bukkit;
-import org.bukkit.World;
-
-import java.time.Duration;
-
-public class WorldCountCollector extends LiveCollector {
-
-    private static final CollectorData PLAYER_COUNT = new CollectorData("airplane:world:playercount", "Player Count", "The number of players currently on the server.", new SuffixFormatter(" Player", " Players"), CustomCategories.ENTITIES_AND_CHUNKS);
-    private static final CollectorData ENTITY_COUNT = new CollectorData("airplane:world:entitycount", "Entity Count", "The number of entities in all worlds", new SuffixFormatter(" Entity", " Entities"), CustomCategories.ENTITIES_AND_CHUNKS);
-    private static final CollectorData CHUNK_COUNT = new CollectorData("airplane:world:chunkcount", "Chunk Count", "The number of chunks currently loaded.", new SuffixFormatter(" Chunk", " Chunks"), CustomCategories.ENTITIES_AND_CHUNKS);
-    private static final CollectorData TILE_ENTITY_COUNT = new CollectorData("airplane:world:blockentitycount", "Block Entity Count", "The number of block entities currently loaded.", new SuffixFormatter(" Block Entity", " Block Entities"), CustomCategories.ENTITIES_AND_CHUNKS);
-
-    public WorldCountCollector() {
-        super(PLAYER_COUNT, ENTITY_COUNT, CHUNK_COUNT, TILE_ENTITY_COUNT);
-
-        this.interval = Duration.ofSeconds(5);
-    }
-
-    @Override
-    public void run() {
-        int entities = 0;
-        int chunkCount = 0;
-        int tileEntityCount = 0;
-
-        if (!Bukkit.isStopping()) {
-            for (World world : Bukkit.getWorlds()) {
-                entities += world.getEntityCount();
-                chunkCount += world.getChunkCount();
-                tileEntityCount += world.getTileEntityCount();
-            }
-        }
-
-        this.report(PLAYER_COUNT, Bukkit.getOnlinePlayers().size());
-        this.report(ENTITY_COUNT, entities);
-        this.report(CHUNK_COUNT, chunkCount);
-        this.report(TILE_ENTITY_COUNT, tileEntityCount);
-    }
-}
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index b343d8ee7435312929558efdaf127334d8e2fff6..49dc0c441b9dd7e7745cf15ced67f383ebee1f99 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -19,8 +19,7 @@ public class MinecraftInternalPlugin extends PluginBase {
     private boolean enabled = true;
 
     private final String pluginName;
-    private org.bukkit.plugin.PluginLogger logger;
-    private PluginDescriptionFile pdf; // Airplane
+    private PluginDescriptionFile pdf;
 
     public MinecraftInternalPlugin() {
         this.pluginName = "Minecraft";
@@ -73,12 +72,7 @@ public class MinecraftInternalPlugin extends PluginBase {
 
     @Override
     public PluginLogger getLogger() {
-        // Airplane start
-        if (this.logger == null) {
-            this.logger = new org.bukkit.plugin.PluginLogger(this); // Airplane
-        }
-        return this.logger;
-        // Airplane end
+        throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
@@ -88,7 +82,7 @@ public class MinecraftInternalPlugin extends PluginBase {
 
     @Override
     public Server getServer() {
-        return org.bukkit.Bukkit.getServer(); // Airplane - impl
+        throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
index 2dcb1a7ca5cef0a1715b6219bd47e0ff59565b09..c7ed6e0f8a989cec97700df2b15198c9c481c549 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ServerShutdownThread.java
@@ -11,7 +11,6 @@ public class ServerShutdownThread extends Thread {
 
     @Override
     public void run() {
-        try { gg.airplane.flare.ProfilingManager.stop(); } catch (Throwable t) {} // Airplane - shut down Flare if it's running
         try {
             // Paper start - try to shutdown on main
             server.safeShutdown(false, false);
